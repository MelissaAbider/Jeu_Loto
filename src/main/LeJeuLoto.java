package main;

import autresClasses.BonAchat;
import autresClasses.CarteLoto;
import autresClasses.Joueur;
import autresClasses.LesCartes;
import autresClasses.LesJoueurs;
import autresClasses.ListeLot;
import autresClasses.Lot;
import autresClasses.Objet;
import autresClasses.PanneauImage;
import dialogsOption.AchatCarteDlg;
import dialogsOption.AjoutLotDlg;
import dialogsOption.OptionDlg;
import dialogsOption.SaisieJoueurDlg;
import dialogsOption.VisuJoueurDlg;
import dialogsOption.VisuLotsDlg;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Abider
 */
public class LeJeuLoto extends javax.swing.JFrame {
    public boolean carteAchetee; // pour savoir si le joueur a ou non acheté une carte
    private int option; // contien l'option du jeu 1 pour quine 2 pour double quinen etc ...
    private int nbCol;
    private int nbNum;
    private int nbLig;
    private LesJoueurs LesJ;
    private LesJoueurs Gagnants;
    private Joueur gagnant;
    private final int MAX = 90;
    private final int boules[];
    private String Nom_cadeau = ""; // pour afficher le nom du cadeau dans l'historique
    private ListeLot lstL;
    private Lot lotEnjeux;

    /**
     * Creates new form leJeuLoto
     */
    public LeJeuLoto() {
        initComponents();
        this.option = 1;
        this.nbCol = 5;
        this.nbNum = 4;
        this.nbLig = 3;
        this.carteAchetee = false;
        this.LesJ = new LesJoueurs();
        this.Gagnants = new LesJoueurs();
        this.gagnant = new Joueur();
        boules = new int[MAX];
        lstL = new ListeLot();
        initBoules();
        initLots();
    }

    public void initLots() {
        // création de 4 lot
        Lot l1 = new Objet("AirPod", "Objet", 2,
                Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/airpod.jpeg")));// creationd'un lot
                                                                                                     // de type objet
        Lot l2 = new Objet("Ordinateur", "Objet", 3,
                Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/ordinateur.jpg")));// creationd'un
                                                                                                        // lot de type
                                                                                                        // objet
        Lot l3 = new BonAchat("bon de 30 €", "Bon d'achat", 1, 30); // creation d'un lot de type bon D'achat
        Lot l4 = new BonAchat("Bon de 100 €", "Bon d'achat", 2, 100); // creation d'un lot de type bon D'achat
        // ajout des lots à la liste
        this.lstL.ajoute(l1);
        this.lstL.ajoute(l2);
        this.lstL.ajoute(l3);
        this.lstL.ajoute(l4);

    }

    public void initBoules() {
        for (int i = 0; i < boules.length; i++) {
            boules[i] = 0;
        }
    }

    private void afficheCartes() {
        int cpt = 0;
        for (Joueur j : LesJ.getLst()) {
            int nbCartes = j.getMesCartes().getTaille();
            switch (nbCartes) { // après chaque case le compteur est incrémenté de 2 pour passer aux joueur
                                // suivant(ses deux Jpanel reservé pour ses cartes)
                case 0:
                    cpt += 2;
                    break;
                case 1:
                    JPanel p = (JPanel) LesCartons.getComponent(cpt);
                    j.getMesCartes().getCarte(0).dessineCarte(p, j.getCouleur());
                    cpt += 2;
                    break;
                case 2:
                    JPanel p1 = (JPanel) LesCartons.getComponent(cpt);
                    cpt++;
                    j.getMesCartes().getCarte(0).dessineCarte(p1, j.getCouleur());
                    JPanel p2 = (JPanel) LesCartons.getComponent(cpt);
                    cpt++;
                    j.getMesCartes().getCarte(1).dessineCarte(p2, j.getCouleur());

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void affJ(String ps) {
        Joueur jou = new Joueur(); // déclaration et initialisation d'un joueur par defaut
        for (Joueur j : LesJ.getLst()) { // boucle sur la liste des joueurs
            if (j.getPseudo().equals(ps))
                jou = j; // affectation du joueur à la variable jou si son pseudo est reconnue dans la
                         // liste des joueur de la classe LeJeuLoto
        }
        VisuJoueurDlg diag = new VisuJoueurDlg(this, true, jou); // appel au constructeur de la jDialog en mode bloquant
        diag.setSize(600, 500); // definition de la taille de la jDialog
        diag.setLocation(100, 100);// definition de sa position par rapport au coins supérieur gauche de l'écran
        diag.setVisible(true); // jDialog rendu visible
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nord = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        centre = new javax.swing.JPanel();
        LesCartons = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        droite = new javax.swing.JPanel();
        joueur1 = new javax.swing.JButton();
        joueur2 = new javax.swing.JButton();
        joueur3 = new javax.swing.JButton();
        joueur4 = new javax.swing.JButton();
        sudc = new javax.swing.JPanel();
        cadeau = new javax.swing.JLabel();
        sud = new javax.swing.JPanel();
        sNord = new javax.swing.JPanel();
        historique = new javax.swing.JLabel();
        optionChoisie = new javax.swing.JLabel();
        sSud = new javax.swing.JPanel();
        affHistq = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        historiqueTir = new javax.swing.JTextArea();
        panLot = new javax.swing.JPanel();
        sSudPanDroit = new javax.swing.JPanel();
        btTirage = new javax.swing.JButton();
        numChoisi = new javax.swing.JLabel();
        btArreter = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Ajout = new javax.swing.JMenu();
        joueur = new javax.swing.JMenuItem();
        Lot = new javax.swing.JMenuItem();
        Action = new javax.swing.JMenu();
        optionJeu = new javax.swing.JMenuItem();
        afficherLots = new javax.swing.JMenuItem();
        acheterCartes = new javax.swing.JMenuItem();
        demarrer = new javax.swing.JMenuItem();
        continuer = new javax.swing.JMenuItem();
        recommencer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Voici les  cartes dont vous disposez");

        javax.swing.GroupLayout nordLayout = new javax.swing.GroupLayout(nord);
        nord.setLayout(nordLayout);
        nordLayout.setHorizontalGroup(
                nordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 774, Short.MAX_VALUE)
                        .addGroup(nordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(nordLayout.createSequentialGroup()
                                        .addGap(0, 274, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addGap(0, 274, Short.MAX_VALUE))));
        nordLayout.setVerticalGroup(
                nordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 19, Short.MAX_VALUE)
                        .addGroup(nordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(nordLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addGap(0, 0, Short.MAX_VALUE))));

        getContentPane().add(nord, java.awt.BorderLayout.NORTH);

        centre.setLayout(new java.awt.BorderLayout());

        LesCartons.setLayout(new java.awt.GridLayout(4, 2));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel5);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel7);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 348, Short.MAX_VALUE));
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 71, Short.MAX_VALUE));

        LesCartons.add(jPanel8);

        centre.add(LesCartons, java.awt.BorderLayout.CENTER);

        droite.setLayout(new java.awt.GridLayout(4, 1));

        joueur1.setText("joueur1");
        joueur1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joueur1ActionPerformed(evt);
            }
        });
        droite.add(joueur1);

        joueur2.setText("joueur2");
        joueur2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joueur2ActionPerformed(evt);
            }
        });
        droite.add(joueur2);

        joueur3.setText("joueur3");
        joueur3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joueur3ActionPerformed(evt);
            }
        });
        droite.add(joueur3);

        joueur4.setText("joueur4");
        joueur4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joueur4ActionPerformed(evt);
            }
        });
        droite.add(joueur4);

        centre.add(droite, java.awt.BorderLayout.EAST);

        cadeau.setFont(new java.awt.Font("Lato Heavy", 2, 15)); // NOI18N
        cadeau.setText("Cadeau:Lave Linge");
        sudc.add(cadeau);

        centre.add(sudc, java.awt.BorderLayout.SOUTH);

        getContentPane().add(centre, java.awt.BorderLayout.CENTER);

        sud.setLayout(new java.awt.BorderLayout());

        sNord.setLayout(new java.awt.GridLayout(1, 2));

        historique.setText("Historique du tirage des boules");
        sNord.add(historique);

        optionChoisie.setText("Option choisie : Carton Plein");
        sNord.add(optionChoisie);

        sud.add(sNord, java.awt.BorderLayout.NORTH);

        sSud.setLayout(new java.awt.GridLayout(1, 2));

        affHistq.setLayout(new java.awt.GridLayout(1, 2));

        historiqueTir.setColumns(20);
        historiqueTir.setRows(5);
        jScrollPane2.setViewportView(historiqueTir);

        affHistq.add(jScrollPane2);

        panLot.setLayout(new java.awt.GridLayout(1, 1));
        affHistq.add(panLot);

        sSud.add(affHistq);

        sSudPanDroit.setLayout(new java.awt.GridLayout(1, 3));

        btTirage.setText("Tirage");
        btTirage.setEnabled(false);
        btTirage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTirageActionPerformed(evt);
            }
        });
        sSudPanDroit.add(btTirage);

        numChoisi.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        numChoisi.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numChoisi.setText("19");
        sSudPanDroit.add(numChoisi);

        btArreter.setText("Arreter");
        btArreter.setEnabled(false);
        btArreter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btArreterActionPerformed(evt);
            }
        });
        sSudPanDroit.add(btArreter);

        sSud.add(sSudPanDroit);

        sud.add(sSud, java.awt.BorderLayout.SOUTH);

        getContentPane().add(sud, java.awt.BorderLayout.SOUTH);

        Ajout.setText("Ajout");

        joueur.setText("Joueur");
        joueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joueurActionPerformed(evt);
            }
        });
        Ajout.add(joueur);

        Lot.setText("Lot");
        Lot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LotActionPerformed(evt);
            }
        });
        Ajout.add(Lot);

        jMenuBar1.add(Ajout);

        Action.setText("Action");

        optionJeu.setText("Option jeu");
        optionJeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionJeuActionPerformed(evt);
            }
        });
        Action.add(optionJeu);

        afficherLots.setText("Afficher lots");
        afficherLots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficherLotsActionPerformed(evt);
            }
        });
        Action.add(afficherLots);

        acheterCartes.setText("Acheter Cartes");
        acheterCartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acheterCartesActionPerformed(evt);
            }
        });
        Action.add(acheterCartes);

        demarrer.setText("Démarrer Jeu");
        demarrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demarrerActionPerformed(evt);
            }
        });
        Action.add(demarrer);

        continuer.setText("Continuer");
        continuer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuerActionPerformed(evt);
            }
        });
        Action.add(continuer);

        recommencer.setText("Recommencer");
        recommencer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recommencerActionPerformed(evt);
            }
        });
        Action.add(recommencer);

        jMenuBar1.add(Action);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void joueurActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_joueurActionPerformed
        // TODO add your handling code here:
        SaisieJoueurDlg aj = new SaisieJoueurDlg(this, true);
        aj.setVisible(true); // on affiche la boite , la remplie et valide ou ferme
        if (aj.getOk() == true && LesJ.getTaille() < 4) { // on vérifie si le joueur saisie avait bien un pseudo
            Joueur j = new Joueur(aj.getJoueur().getPseudo()); // création d'un joueur à partir du pseudo
            j.setCouleur(aj.getJoueur().getCouleur()); // affectation de la couleur choisie au joueur
            j.setSolde(aj.getJoueur().getSolde());// affectation du solde
            j.setPhoto(aj.getPhoto());
            this.LesJ.ajoute(j); // ajout du joueur à la liste des joueurs
            switch (LesJ.getTaille()) {
                case 1:
                    // si on disdose de 1 joueur après l'ajout de j
                    joueur1.setText(aj.getJoueur().getPseudo()); // affichge du pseudo sur le premier bouton
                    joueur1.setBackground(aj.getJoueur().getCouleur()); // definition du la couleur de fond du bouton
                    break;
                case 2:
                    // si on disdose de 2 joueur après l'ajout de j
                    joueur2.setText(aj.getJoueur().getPseudo()); // affichge du pseudo sur le premier bouton
                    joueur2.setBackground(aj.getJoueur().getCouleur()); // definition du la couleur de fond du bouton
                    break;
                case 3:
                    // si on disdose de 3 joueur après l'ajout de j
                    joueur3.setText(aj.getJoueur().getPseudo()); // affichge du pseudo sur le premier bouton
                    joueur3.setBackground(aj.getJoueur().getCouleur()); // definition du la couleur de fond du bouton
                    break;
                default:
                    joueur4.setText(aj.getJoueur().getPseudo()); // affichge du pseudo sur le premier bouton
                    joueur4.setBackground(aj.getJoueur().getCouleur()); // definition du la couleur de fond du bouton

                    break;
            }
        }
    }// GEN-LAST:event_joueurActionPerformed

    private void LotActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_LotActionPerformed
        // TODO add your handling code here:
        AjoutLotDlg al = new AjoutLotDlg(this, true);
        al.setVisible(true);

        System.out.println(al.getOk());
        if (al.getMonlot() != null && al.getOk() == true) {// s'il y a lot de crée
            this.lstL.ajoute(al.getMonlot());

        }
    }// GEN-LAST:event_LotActionPerformed

    private void acheterCartesActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_acheterCartesActionPerformed
        // TODO add your handling code here:
        if (this.LesJ.getTaille() >= 2) {
            AchatCarteDlg ac = new AchatCarteDlg(this, true, LesJ, nbLig, nbCol, nbNum);
            ac.setVisible(true);
            boolean indic = ac.getAchat();
            if (indic) { // si la carte est acheté on l'ajoute et l'affiche devant le joueur
                this.carteAchetee = true;// on met à true chaque fois qu'on s'en vas acheter pourque si on vien le faire
                                         // parcequ'on n'as pas pu démarré le jeu la variable redient à true avant de
                                         // refaire le test dans la gestionnaire de démarrage
                afficheCartes();
                this.setSize(this.getWidth() + 1, this.getHeight() + 1);// pour forcé le rafraichisement de la fenêtre
            }

        } else {
            JOptionPane jop1 = new JOptionPane();
            jop1.showMessageDialog(null, "veillez choisir deux joueur au moins avant", "Information",
                    JOptionPane.INFORMATION_MESSAGE);

        }

    }// GEN-LAST:event_acheterCartesActionPerformed

    private void optionJeuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_optionJeuActionPerformed
        // TODO add your handling code here:
        OptionDlg diag = new OptionDlg(this, true, carteAchetee, nbCol, nbNum);
        diag.setVisible(true);
        this.option = diag.getChoix();
        this.nbCol = diag.getNbCol();
        this.nbNum = diag.getNbNum();
        switch (option) {
            case 1:
                this.optionChoisie.setText("Option du jeu: Quine");
                break;
            case 2:
                this.optionChoisie.setText("Option du jeu: Double Quine");
                break;
            default:
                this.optionChoisie.setText("Option du jeu: Carton plein");
                break;
        }
    }// GEN-LAST:event_optionJeuActionPerformed

    private void btTirageActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btTirageActionPerformed
        // TODO add your handling code here:
        int nb, gagnant_retenu;
        this.btArreter.setEnabled(true);
        do {
            nb = (int) (Math.random() * (90) + 1);
        } while (boules[nb - 1] != 0);
        boules[nb - 1] = nb;// on ajoute la boule tiré à sont indice dans la tableau des boules
        this.numChoisi.setText(nb + "");
        this.historiqueTir.append(nb + " * ");
        for (Joueur j : LesJ.getLst()) {
            for (CarteLoto c : j.getMesCartes().getLst()) {
                if (c.estDans(nb)) {
                    c.ajoutJeton(nb);

                }
            }
        }
        afficheCartes();
        Gagnants = CarteLoto.cartonGagnant(this.option, LesJ); // on retourne la liste des eventuelle gagants
        if (Gagnants.getTaille() > 0) {// il y a aumoins un gagnant
            if (Gagnants.getTaille() > 1) { // il y a plus d'un gagnant
                gagnant_retenu = (int) (Math.random() * (Gagnants.getTaille() + 1));// donc on tire au hasard le gagnant
                                                                                    // final
                gagnant = Gagnants.getJoueur(gagnant_retenu); // mis a joueur du gagnant de la classe
                switch (option) {
                    case 1:
                        this.historiqueTir.append("\n... " + gagnant.getPseudo() + " QUINE " + gagnant.getPseudo()
                                + " a gagné " + this.Nom_cadeau + " \n la Partie Terminée ");
                        this.btTirage.setEnabled(false);
                        break;
                    case 2:
                        this.historiqueTir.append("\n... " + gagnant.getPseudo() + " DOUBLE QUINE "
                                + gagnant.getPseudo() + " a gagné " + this.Nom_cadeau + "\n la Partie Terminée ");
                        this.btTirage.setEnabled(false);
                        break;
                    case 3:
                        this.historiqueTir.append("\n... " + gagnant.getPseudo() + " CARTON PLEIN "
                                + gagnant.getPseudo() + " a gagné " + this.Nom_cadeau + " \n la Partie Terminée");
                        this.btTirage.setEnabled(false);

                }
                reinitLot(); // on enleve le lot mis en jeu de la liste des lots
            } else {// il y a un seul gagnant
                switch (option) {
                    case 1:
                        this.historiqueTir.append("\n... " + Gagnants.getJoueur(0).getPseudo() + " QUINE "
                                + Gagnants.getJoueur(0).getPseudo() + " a gagné " + this.Nom_cadeau
                                + " \n la Partie Terminée ");
                        this.btTirage.setEnabled(false);
                        break;
                    case 2:
                        this.historiqueTir.append("\n... " + Gagnants.getJoueur(0).getPseudo() + " DOUBLE QUINE "
                                + Gagnants.getJoueur(0).getPseudo() + " a gagné " + this.Nom_cadeau
                                + "\n la Partie Terminée ");
                        this.btTirage.setEnabled(false);
                        break;
                    case 3:
                        this.historiqueTir.append("\n... " + Gagnants.getJoueur(0).getPseudo() + " CARTON PLEIN "
                                + Gagnants.getJoueur(0).getPseudo() + " a gagné " + this.Nom_cadeau
                                + " \n la Partie Terminée");
                        this.btTirage.setEnabled(false);

                }
                reinitLot(); // on enleve le lot mis en jeu de la liste des lots
            }
        }

    }// GEN-LAST:event_btTirageActionPerformed

    public void reinitLot() {
        try {
            for (Lot l : this.lstL.getLstL()) {
                if (l == this.lotEnjeux)
                    this.lstL.enleveLot(l);
            }
        } catch (Exception e) {

        }
    }

    private void joueur1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_joueur1ActionPerformed
        // TODO add your handling code here:
        String ps = joueur1.getText();
        affJ(ps);
    }// GEN-LAST:event_joueur1ActionPerformed

    private void joueur2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_joueur2ActionPerformed
        // TODO add your handling code here:
        String ps = joueur2.getText();
        affJ(ps);
    }// GEN-LAST:event_joueur2ActionPerformed

    private void joueur3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_joueur3ActionPerformed
        // TODO add your handling code here:
        String ps = joueur3.getText();
        affJ(ps);
    }// GEN-LAST:event_joueur3ActionPerformed

    private void joueur4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_joueur4ActionPerformed
        // TODO add your handling code here:
        String ps = joueur4.getText();
        affJ(ps);
    }// GEN-LAST:event_joueur4ActionPerformed

    private void btArreterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btArreterActionPerformed
        // TODO add your handling code here:
        historiqueTir.append("\nla partie est intentionnellement  arrêtée");
        this.btTirage.setEnabled(false);

    }// GEN-LAST:event_btArreterActionPerformed

    private void demarrerActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_demarrerActionPerformed
        // TODO add your handling code here:
        choisirLot();

    }// GEN-LAST:event_demarrerActionPerformed

    public boolean choisirLot() {
        if (this.lstL.getLstL().size() > 0) {
            for (Joueur j : this.LesJ.getLst()) {
                if (j.getMesCartes().getTaille() == 0) { // s'il y a un joueur qui n'a pas acheté de carte
                    this.carteAchetee = false;
                }
            }
            if (this.carteAchetee)// s'il y a des cartes acheter et au moins un joueur
            {
                // desactivation des option au demarrage
                this.acheterCartes.setEnabled(false);
                this.optionJeu.setEnabled(false);
                this.demarrer.setEnabled(false);
                this.Lot.setEnabled(false);

                // créera deux lot par defaut pour pouvoir lancer le jeu
                switch (option) {
                    case 1:
                        for (Lot l : lstL.getLstL()) {
                            if (l.getNiveau() == 1) {
                                this.option = 1; // on actualise l'option à 1
                                this.cadeau.setText("Cadeau: " + l.getDescriptif());
                                this.Nom_cadeau = l.getDescriptif();
                                this.optionChoisie.setText("Option du jeu: Quine");
                                this.lotEnjeux = l;
                                if (l.getCategorie().equals("Objet")) {
                                    Objet obj = (Objet) l;
                                    PanneauImage pan = new PanneauImage(obj.getPho());
                                    this.panLot.add(pan);
                                } else {
                                    JLabel lb = new JLabel(l.getDescriptif());
                                    this.panLot.add(lb);

                                }
                                break;
                            }
                        }
                        break;
                    case 2:
                        for (Lot l : lstL.getLstL()) {
                            if (l.getNiveau() == 2) {
                                this.option = 2;
                                this.cadeau.setText("Cadeau: " + l.getDescriptif());
                                this.Nom_cadeau = l.getDescriptif();
                                this.optionChoisie.setText("Option du jeu: Double Quine");
                                this.lotEnjeux = l;
                                if (l.getCategorie().equals("Objet")) {
                                    Objet obj = (Objet) l;
                                    PanneauImage pan = new PanneauImage(obj.getPho());
                                    this.panLot.add(pan);
                                } else {
                                    JLabel lb = new JLabel(l.getDescriptif());
                                    this.panLot.add(lb);
                                }
                                break;
                            }
                        }
                        break;
                    case 3:
                        for (Lot l : lstL.getLstL()) {
                            if (l.getNiveau() == 3) {
                                this.option = 3;
                                this.cadeau.setText("Cadeau: " + l.getDescriptif());
                                this.Nom_cadeau = l.getDescriptif();
                                this.optionChoisie.setText("Option du jeu: Carton plein");
                                this.lotEnjeux = l;
                                if (l.getCategorie().equals("Objet")) {
                                    Objet obj = (Objet) l;
                                    PanneauImage pan = new PanneauImage(obj.getPho());
                                    this.panLot.add(pan);
                                } else {
                                    JLabel lb = new JLabel(l.getDescriptif());
                                    this.panLot.add(lb);
                                }
                                break;
                            }
                        }
                        ;

                }
                this.btTirage.setEnabled(true);
            } else {
                JOptionPane jop1 = new JOptionPane();
                jop1.showMessageDialog(null, "veillez  que chaque joueur achete aumoins une carte avant de demarrer",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } else {
            JOptionPane jop1 = new JOptionPane();
            jop1.showMessageDialog(null, "IL n'y a plus de lot disponible ", "Information",
                    JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }

    private void afficherLotsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_afficherLotsActionPerformed

        // TODO add your handling code here:
        VisuLotsDlg diag = new VisuLotsDlg(this, true, this.lstL);
        diag.setVisible(true);
    }// GEN-LAST:event_afficherLotsActionPerformed

    private void continuerActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_continuerActionPerformed
        // TODO add your handling code here:

        if (this.option < 3) {
            this.option++;
            this.panLot.removeAll();
            boolean rep = choisirLot();
            if (rep) {// on a aumoins un lot
                this.btTirage.setEnabled(true); // on rend actif le bouton de tirage
                this.demarrer.setEnabled(false); // on désactiv le bouton démarrer

            }
        } else { // il n'y a pas de suite à conton plein donc on ne peux pas continuer
            JOptionPane jop1 = new JOptionPane();
            jop1.showMessageDialog(null, "Vous ne pouvez pas continuer , Carton plein atteint", "Information",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }// GEN-LAST:event_continuerActionPerformed

    private void recommencerActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_recommencerActionPerformed
        // TODO add your handling code here:
        // réactivation des options
        this.acheterCartes.setEnabled(true);
        this.optionJeu.setEnabled(true);
        this.demarrer.setEnabled(true);
        this.Lot.setEnabled(false);

        for (Joueur j : this.LesJ.getLst()) {
            j.setSolde(j.getSolde() + j.getMesCartes().getTaille() * j.getMesCartes().getCarte(0).getPrix()); // on
                                                                                                              // reinitialise
                                                                                                              // le
                                                                                                              // solde
                                                                                                              // du
                                                                                                              // joueur
                                                                                                              // en
                                                                                                              // fonction
                                                                                                              // du
                                                                                                              // nombre
                                                                                                              // de
                                                                                                              // carte
                                                                                                              // qu'il a
            j.setMesC(new LesCartes()); // on réinitialise la liste des cartes
        }
        this.historiqueTir.setText("");// on vide l'historique
        this.panLot.removeAll(); // on vide le panel des lots
        this.btTirage.setEnabled(false);// le bouton est désactivé
        this.lotEnjeux = null;
        for (int i = 0; i < 8; i++) { // on vide les cartes
            JPanel jp = (JPanel) this.LesCartons.getComponent(i);
            jp.removeAll();
        }
        // rappel des initialisation comme dans le constructeur
        this.carteAchetee = false;
        this.Gagnants = new LesJoueurs();
        this.gagnant = new Joueur();
        lstL = new ListeLot();
        initBoules();
        initLots();
        this.demarrer.setEnabled(true); // on peut demarrer une nouvelle partir
        this.setSize(this.getWidth() + 1, this.getHeight() + 1);
    }// GEN-LAST:event_recommencerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeJeuLoto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LeJeuLoto fram = new LeJeuLoto();
                fram.setLocation(300, 100);
                fram.setSize(1200, 700);
                fram.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Action;
    private javax.swing.JMenu Ajout;
    private javax.swing.JPanel LesCartons;
    private javax.swing.JMenuItem Lot;
    private javax.swing.JMenuItem acheterCartes;
    private javax.swing.JPanel affHistq;
    private javax.swing.JMenuItem afficherLots;
    private javax.swing.JButton btArreter;
    private javax.swing.JButton btTirage;
    private javax.swing.JLabel cadeau;
    private javax.swing.JPanel centre;
    private javax.swing.JMenuItem continuer;
    private javax.swing.JMenuItem demarrer;
    private javax.swing.JPanel droite;
    private javax.swing.JLabel historique;
    private javax.swing.JTextArea historiqueTir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem joueur;
    private javax.swing.JButton joueur1;
    private javax.swing.JButton joueur2;
    private javax.swing.JButton joueur3;
    private javax.swing.JButton joueur4;
    private javax.swing.JPanel nord;
    private javax.swing.JLabel numChoisi;
    private javax.swing.JLabel optionChoisie;
    private javax.swing.JMenuItem optionJeu;
    private javax.swing.JPanel panLot;
    private javax.swing.JMenuItem recommencer;
    private javax.swing.JPanel sNord;
    private javax.swing.JPanel sSud;
    private javax.swing.JPanel sSudPanDroit;
    private javax.swing.JPanel sud;
    private javax.swing.JPanel sudc;
    // End of variables declaration//GEN-END:variables
}
